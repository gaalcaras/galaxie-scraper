#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script: galaxie-scraper
Licence: GPL3
Auteur: Gabriel Alcaras <gabriel.alcaras@ehess.fr>

galaxie-scraper est un script python qui récupère les offres de postes d'ATER
sur la plateforme Galaxie et les exporte sous forme de fichier .csv.

Utilisez `galaxie-scraper -h` pour en connaître le mode de fonctionnement.

Ce script est fourni sans aucune garantie. Il utilise vos identifiants
personnels pour se connecter à Galaxie et y effectuer des requêtes.
"""

import argparse
import csv
import re
import sys

import mechanicalsoup

PARSER = argparse.ArgumentParser("Récupère les offres ATER sur Galaxie "
                                 "et les écrit au format csv.")
PARSER.add_argument("-ls", action="store_true",
                    help="Donne la liste des sections disponibles. "
                         "Ne nécessite pas vos identifiants Galaxie.")
PARSER.add_argument("-u", "--username", default=None,
                    help="Votre numéro de candidat Galaxie")
PARSER.add_argument("-p", "--password", default=None,
                    help="Votre mot de passe Galaxie")
PARSER.add_argument("-s", "--sections", default=None,
                    help="Les sections qui vous intéressent. "
                         "Accepte jusqu'à 6 sections, séparées par des virgules.")
ARGS = PARSER.parse_args()

URL_BASE = 'https://galaxie.enseignementsup-recherche.gouv.fr/'

FIELDS = {
    'etablissement': 'eta',
    'numero': 'numofr',
    'localisation': 'localofr',
    'section1': 'j_idt25',
    'quotite': 'j_idt76',
    'quotite_supp': 'j_idt77',
    'etat': 'j_idt80',
    'etat_supp': 'j_idt81',
    'profil_fr': 'profilofr',
    'profil_en': 'j_idt38',
    'euraxess': 'j_idt41_0_j_idt43',
    'mots_cles': 'j_idt108',
    'ufr': 'j_idt112',
    'ufr_ref': 'j_idt114',
    'labo1': 'j_idt118',
    'labo2': 'j_idt120',
    'labo3': 'j_idt122',
    'labo4': 'j_idt124',
    'labo5': 'j_idt126',
    'contact': 'j_idt48',
    'adresse_localisation': 'j_idt50',
    'codpost_localisation': 'j_idt52',
    'adresse_courrier': 'j_idt55',
    'codpost_courrier': 'j_idt59',
    'ville_courrier': 'j_idt61',
    'gestionnaire': 'j_idt63',
    'gestio_fonction': 'j_idt65',
    'gestio_tel1': 'j_idt67',
    'gestio_tel2': 'j_idt69',
    'gestio_fax': 'j_idt71',
    'gestio_mail': 'j_idt73',
    'date_prise_fonctions': 'j_idt83',
    'date_ouverture_cand': 'j_idt85',
    'date_cloture_cand': 'j_idt87',
    'date_decision': 'j_idt89',
    'date_maj': 'j_idt93',
    'dossier_papier': 'j_idt128_0_j_idt131',
    'dossier_application': 'j_idt128_1_j_idt131',
    'dossier_appli_url': 'j_idt128_1_j_idt135',
    'dossier_email': 'j_idt128_2_j_idt131',
    'dossier_email_adr': 'j_idt128_2_j_idt135',
    'dossier_num_phys': 'j_idt128_3_j_idt131',
    'dossier_aucun': 'j_idt128_4_j_idt131'
}

SECTIONS = (
    "01: Droit privé et sciences criminelles",
    "02: Droit public",
    "03: Histoire du droit et des institutions",
    "04: Science politique",
    "05: Sciences économiques",
    "06: Sciences de gestion",
    "07: Sciences du langage : linguistique et phonétique générales ...",
    "08: Langues et littératures anciennes",
    "09: Langue et littérature françaises",
    "10: Littératures comparées",
    "11: Langues et littératures anglaises et anglo-saxonnes",
    "12: Langues et littératures germaniques et scandinaves",
    "13: Langues et littératures slaves",
    "14: Langues et littératures romanes :  espagnol, italien, ...",
    "15: Langues et littératures arabes, chinoises, japonaises, ...",
    "16: Psychologie, psychologie clinique, psychologie sociale",
    "17: Philosophie",
    "18: Arts(architect., appl.,plast.,spect., musique, musicol., ...",
    "19: Sociologie, démographie",
    "20: Anthropologie biologique, ethnologie, préhistoire",
    "21: Histoire, civilisation, archéol. et art des mondes anciens et ...",
    "22: Histoire et civilisations : histoire des mondes modernes...",
    "23: Géographie physique, humaine, économique et régionale",
    "24: Aménagement de l'espace, urbanisme",
    "25: Mathématiques",
    "26: Mathématiques appliquées et applications des mathématiques",
    "27: Informatique",
    "28: Milieux denses et matériaux",
    "29: Constituants élémentaires",
    "30: Milieux dilués et optique",
    "31: Chimie théorique, physique, analytique",
    "32: Chimie organique, minérale, industrielle",
    "33: Chimie des matériaux",
    "34: Astronomie, astrophysique",
    "35: Structure et évolution de la terre et des autres planètes",
    "36: Terre solide : géodynamique des enveloppes supérieures, ...",
    "37: Météorologie, océanographie physique et physique de ...",
    "60: Mécanique, génie mécanique, génie civil",
    "61: Génie informatique, automatique et traitement du signal",
    "62: Energétique, génie des procédés",
    "63: Génie électrique, électronique, photonique et systèmes",
    "64: Biochimie et biologie moléculaire",
    "65: Biologie cellulaire",
    "66: Physiologie",
    "67: Biologie des populations et écologie",
    "68: Biologie des organismes",
    "69: Neurosciences",
    "70: Sciences de l'éducation",
    "71: Sciences de l'information et de la communication",
    "72: Epistémologie, histoire des sciences et des techniques",
    "73: Cultures et langues régionales",
    "74: Sciences et techniques des activités physiques et sportives",
    "76: Théologie catholique",
    "77: Théologie protestante",
    "85: Sc. physicochim. et ingénierie appliquée à la santé (ex 39è)",
    "86: Sc. du médicament et des autres produits de santé (ex 40è)",
    "87: Sc. biologiques, fondamentales et cliniques (ex 41è)"
)

def get_position(browser):
    """
    Extrait les valeurs des champs sur une fiche de poste ATER.
    Retourne un dictionnaire des valeurs.
    """
    result = dict()
    for var_name, field_name in FIELDS.items():
        field = browser.get_current_page().find(attrs={'name': field_name})

        if not field:
            continue

        if field.get('value'):
            field_value = field.get('value')
        elif field.get('type') == "checkbox":
            field_value = 'oui' if field.get('checked') else 'non'
        elif field.name == 'textarea':
            field_value = field.text
        else:
            field_value = None

        if field_value:
            field_value = field_value.encode('utf8')
            if not isinstance(field_value, str):
                field_value = field_value.decode()

        result.update({var_name: field_value})
    return result

def get_url_from_onclick(elts):
    "Retourne les urls de liens via leur attribut onclick"
    urls = []
    pattern = re.compile(r"openPopUp\(\\'(.*)\\'\)(;|',).*$")
    for elt in elts:
        match = pattern.search(elt.get('onclick'))
        if match:
            urls.append(URL_BASE + 'altaircand/' + match.group(1))
    return urls

def get_popup_id_from_onclick(elts):
    "Retourne l'identifiant des popups via leur attribut onclick"
    def extract_id(onclick):
        pattern = re.compile(r"\{'(.*)':.*\}")
        search = pattern.search(onclick)
        if search:
            return search.group(1)
        return None
    return [extract_id(e.get('onclick')) for e in elts]

if ARGS.ls:
    print('Liste des sections disponibles :')
    sys.exit('\n'.join(SECTIONS))

if not ARGS.username or not ARGS.password:
    sys.exit("Veuillez donner vos identifiants Galaxie. "
             "Exécutez `galaxie-scraper -h` pour en savoir plus.")

if not ARGS.sections:
    sys.exit("Veuillez jusqu'à 6 sections qui vous intéressent. "
             "Exécutez `galaxie-scraper -h` pour en savoir plus.")

NUMBERS = [int(s[:2]) for s in SECTIONS]
SECTIONS_REQ = [NUMBERS.index(int(s)) for s in ARGS.sections.split(',')]

print('Vos sections :')
print('\n'.join([SECTIONS[i] for i in SECTIONS_REQ]))

print('Connexion à Galaxie...')
BROWSER = mechanicalsoup.StatefulBrowser()
BROWSER.open(URL_BASE + 'antares/can/astree/index.jsp')
BROWSER.select_form('form[name="connexion"]')
BROWSER['numecan'] = ARGS.username
BROWSER['pwd_RAW'] = ARGS.password
BROWSER.submit_selected()

if not BROWSER.get_current_page().find('span', 'textWarning'):
    sys.exit('La connexion à Galaxie a échoué. '
             'Vérifiez vos identifiants.')

print('Ouvre une session Altair (récupère le CID)...')
BROWSER.open(URL_BASE + 'altaircand/home.seam')
BROWSER.open(URL_BASE + 'altaircand/ActureC021.seam?cid=' + BROWSER.get_url()[-5:])

print('Recherche des positions ATER...')
BROWSER.select_form('form[id="TdtCtuEdit"]')
for i, section in enumerate(SECTIONS_REQ):
    BROWSER['TdtCtuEdit_section' + str(i+1)] = section
BROWSER.submit_selected()

POSITIONS = list()

print('Récupération des postes actuellement ouverts...')
CURRENT = BROWSER.links(title="Consulter l'appel à candidatures - nouvelle fenêtre")
CURRENT_URLS = get_url_from_onclick(CURRENT)
print('%s postes actuellement ouverts ont été trouvés.' % len(CURRENT_URLS))

NEXT = BROWSER.links(id="choixAppel_lien_prochain_appel")
NEXT_URLS = get_url_from_onclick(NEXT)[0]

if CURRENT_URLS:
    for i, url in enumerate(CURRENT_URLS):
        print("Récupération d'un poste actuellement ouvert %d/%d" % (i+1, len(CURRENT_URLS)))
        BROWSER.open(url)
        POSITIONS.append(get_position(BROWSER))

print('Récupère les postes prochainement ouverts...')
BROWSER.open(NEXT_URLS)
POPUP_LINKS = BROWSER.links(title="Consulter l'appel à candidatures - nouvelle fenêtre")
POPUP_IDS = get_popup_id_from_onclick(POPUP_LINKS)
print('%s postes prochainement ouverts ont été trouvés.' % len(POPUP_LINKS))

for i, pop_id in enumerate(POPUP_IDS):
    if BROWSER.get_url() != NEXT_URLS:
        BROWSER.open(NEXT_URLS)

    print("Récupération d'un poste prochainement ouvert %d/%d" % (i+1, len(POPUP_IDS)))
    BROWSER.select_form('form[id="j_idt20"]')
    BROWSER.new_control('hidden', pop_id, pop_id)
    BROWSER.submit_selected()

    POSITIONS.append(get_position(BROWSER))

print('Exportation des postes au format csv...')
with open('ater.csv', 'w') as csvfile:
    FIELDNAMES = FIELDS.keys()
    WRITER = csv.DictWriter(csvfile, fieldnames=FIELDNAMES)

    WRITER.writeheader()
    for position in POSITIONS:
        WRITER.writerow(position)

print("C'est terminé!")
